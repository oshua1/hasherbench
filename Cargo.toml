bench = [
    { harness = false, name = "btreeset" },
    { harness = false, name = "hashbrown_adler32" },
    { harness = false, name = "hashbrown_ahasher" },
    { harness = false, name = "hashbrown_bricolage" },
    { harness = false, name = "hashbrown_cityhasher32" },
    { harness = false, name = "hashbrown_cityhasher64" },
    { harness = false, name = "hashbrown_cityhasher128" },
    { harness = false, name = "hashbrown_djb2hasher" },
    { harness = false, name = "hashbrown_farmhasher" },
    { harness = false, name = "hashbrown_fnv1ahasher" },
    { harness = false, name = "hashbrown_foldhash" },
    { harness = false, name = "hashbrown_fxhasher64" },
    { harness = false, name = "hashbrown_hashhasher" },
    { harness = false, name = "hashbrown_highway" },
    { harness = false, name = "hashbrown_inthasher" },
    { harness = false, name = "hashbrown_lookup3hasher" },
    { harness = false, name = "hashbrown_metrohash64" },
    { harness = false, name = "hashbrown_metrohash128" },
    { harness = false, name = "hashbrown_murmur3_32" },
    { harness = false, name = "hashbrown_murmur3_128" },
    { harness = false, name = "hashbrown_murmur3_128x64" },
    { harness = false, name = "hashbrown_oaathasher" },
    { harness = false, name = "hashbrown_rapidhasher" },
    { harness = false, name = "hashbrown_sdbmhasher" },
    { harness = false, name = "hashbrown_seahasher" },
    { harness = false, name = "hashbrown_siphasher" },
    { harness = false, name = "hashbrown_siphasher13" },
    { harness = false, name = "hashbrown_spookyhasher" },
    { harness = false, name = "hashbrown_wyhash" },
    { harness = false, name = "hashbrown_xxhash32" },
    { harness = false, name = "hashbrown_xxhash64" },
    { harness = false, name = "hashbrown_xxhash3_64" },   # xxhash3_128 unfortunately doesn't implement std::Hasher ðŸ˜’
    { harness = false, name = "hashbrown_zwohash" },
    { harness = false, name = "litemap" },
    { harness = false, name = "std_hashset_adler32" },
    { harness = false, name = "std_hashset_ahasher" },
    { harness = false, name = "std_hashset_bricolage" },
    { harness = false, name = "std_hashset_cityhasher32" },
    { harness = false, name = "std_hashset_cityhasher64" },
    { harness = false, name = "std_hashset_cityhasher128" },
    { harness = false, name = "std_hashset_djb2hasher" },
    { harness = false, name = "std_hashset_farmhasher" },
    { harness = false, name = "std_hashset_fnv1ahasher" },
    { harness = false, name = "std_hashset_foldhash" },
    { harness = false, name = "std_hashset_fxhasher64" },
    { harness = false, name = "std_hashset_hashhasher" },
    { harness = false, name = "std_hashset_highway" },
    { harness = false, name = "std_hashset_inthasher" },
    { harness = false, name = "std_hashset_lookup3hasher" },
    { harness = false, name = "std_hashset_metrohash64" },
    { harness = false, name = "std_hashset_metrohash128" },
    { harness = false, name = "std_hashset_murmur3_32" },
    { harness = false, name = "std_hashset_murmur3_128" },
    { harness = false, name = "std_hashset_murmur3_128x64" },
    { harness = false, name = "std_hashset_oaathasher" },
    { harness = false, name = "std_hashset_rapidhasher" },
    { harness = false, name = "std_hashset_sdbmhasher" },
    { harness = false, name = "std_hashset_seahasher" },
    { harness = false, name = "std_hashset_siphasher" },
    { harness = false, name = "std_hashset_siphasher13" },
    { harness = false, name = "std_hashset_spookyhasher" },
    { harness = false, name = "std_hashset_wyhash" },
    { harness = false, name = "std_hashset_xxhash32" },
    { harness = false, name = "std_hashset_xxhash64" },
    { harness = false, name = "std_hashset_xxhash3_64" },   # xxhash3_128 unfortunately doesn't implement std::Hasher ðŸ˜’
    { harness = false, name = "std_hashset_zwohash" },
    { harness = false, name = "vecmap" },
    { harness = false, name = "vector_map" },
]

[package]
name                = "hasherbench"
version             = "0.0.4"
edition             = "2024"
authors             = ["oshua1 <oshua-github@oms.linux-one.org>"]
publish             = false
keywords            = ["benchmark","hasher","hashset"]
description         = "Benchmark several kinds of Hashers, key types and HashSets"
rust-version        = "1.88"

[dependencies]
adler2              = { version = "=2.0.1" }
ahash               = { version = "=0.8.12" }
chrono              = { version = "0.4.41", default-features = false, features = ["now", "alloc", "clock"]}
clap                = { version = "4.5", features = [ "derive", "env" ] }
farmhash            = { version = "=1.1.5" }
fastrand            = { version = "=2.3.0" }
foldhash            = { version = "0.1.5" }
hashbrown           = { version = "0.15.4" }
hash_hasher         = { version = "=2.0.4" }
hashers             = { version = "=1.0.1" }
highhash            = { version = "0.2.0" }
highway             = { version = "=1.3.0" }
integer-hasher      = { version = "0.1.1" }
litemap             = { version = "0.8.0" }
metrohash           = { version = "=1.0.7" }
paste               = { version = "=1.0.15" }
parking_lot         = { version = "0.12.4" }
rapidhash           = { version = "=1.4.0" }
# rayon               = { version = "=1.10" }
ritehash            = { version = "0.2.0" }
seahash             = { version = "=4.1.0" }
stack_dst           = { version = "=0.7.2" }
sysinfo             = { version = "0.36" }
twox-hash           = { version = "=2.1.1", features = ["xxhash32", "xxhash64", "xxhash3_64", "std"] }  # xxhash3_128 unfortunately doesn't implement std::Hasher ðŸ˜’
vecmap-rs           = { version = "0.2.3" }
vector-map          = { version = "=1.0.2" }
wyhash              = { version = "0.6.0" }
zwohash             = { version = "0.1.2" }

[dev-dependencies]
criterion           = { version = "=3.0.1", package = "criterion2", default-features = false }

[[bin]]
name                = "hasherbench"
test                = false
bench               = false

[lints.rust]
single_use_lifetimes        = "allow"   # impl HashSetTrait for vector_map_VecSet::get() fails without (otherwise unneeded) lifetime annotation
unused_crate_dependencies   = "allow"   # Every benchmark module tests single collection only; others remain unused

[lints.clippy]
unreadable_literal          = "allow"   # Numbers are used for function names; need to avoid ambiguities with following percentage parameter

[profile.dev]
opt-level           = 1
lto                 = false
debug               = true
debug-assertions    = true
codegen-units       = 4
panic               = 'unwind'
incremental         = true
overflow-checks     = true

[profile.test]
opt-level           = 'z'
lto                 = false
debug               = false
debug-assertions    = true
codegen-units       = 4
incremental         = true
overflow-checks     = true

[profile.release]
opt-level           = 3
lto                 = true
debug               = false
debug-assertions    = false
codegen-units       = 1
panic               = 'abort'
incremental         = false
overflow-checks     = true
